// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Button with some emoji 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#F5FCFF",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <View
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={null}
  >
    <Text
      style={null}
    >
      üòÄ üòé üëç üíØ
    </Text>
  </View>
</View>
`;

exports[`Storyshots Button with text 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "#F5FCFF",
      "flex": 1,
      "justifyContent": "center",
    }
  }
>
  <View
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={null}
  >
    <Text
      style={null}
    >
      Hello Button
    </Text>
  </View>
</View>
`;

exports[`Storyshots Field Field Default  1`] = `
<View
  style={
    Object {
      "backgroundColor": "#11991e",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "space-around",
      }
    }
    data={Array []}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={3}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "padding": 20,
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
</View>
`;

exports[`Storyshots Field Field Moles 2 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#11991e",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "space-around",
      }
    }
    data={
      Array [
        Object {
          "active": true,
        },
        Object {
          "active": false,
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={3}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "padding": 20,
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Object {
              "flexDirection": "row",
            }
          }
        >
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/idle.png",
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/hole.png",
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`Storyshots Field Field Moles 9 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#11991e",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "space-around",
      }
    }
    data={
      Array [
        Object {
          "active": false,
        },
        Object {
          "active": true,
        },
        Object {
          "active": true,
        },
        Object {
          "active": true,
        },
        Object {
          "active": false,
        },
        Object {
          "active": true,
        },
        Object {
          "active": true,
        },
        Object {
          "active": false,
        },
        Object {
          "active": false,
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={3}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "padding": 20,
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Object {
              "flexDirection": "row",
            }
          }
        >
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/hole.png",
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/idle.png",
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/idle.png",
                }
              }
            />
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Object {
              "flexDirection": "row",
            }
          }
        >
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/idle.png",
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/hole.png",
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/idle.png",
                }
              }
            />
          </View>
        </View>
      </View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          style={
            Object {
              "flexDirection": "row",
            }
          }
        >
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/idle.png",
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/hole.png",
                }
              }
            />
          </View>
          <View
            style={
              Object {
                "justifyContent": "flex-end",
                "minHeight": 115,
              }
            }
          >
            <Image
              accessible={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              source={
                Object {
                  "testUri": "../../../src/views/Mole/img/hole.png",
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`Storyshots Mole Active Mole 1`] = `
<View
  style={
    Object {
      "justifyContent": "flex-end",
      "minHeight": 115,
    }
  }
>
  <Image
    accessible={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    source={
      Object {
        "testUri": "../../../src/views/Mole/img/idle.png",
      }
    }
  />
</View>
`;

exports[`Storyshots Mole Default Mole 1`] = `
<View
  style={
    Object {
      "justifyContent": "flex-end",
      "minHeight": 115,
    }
  }
>
  <Image
    accessible={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    source={
      Object {
        "testUri": "../../../src/views/Mole/img/hole.png",
      }
    }
  />
</View>
`;

exports[`Storyshots Welcome to Storybook 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "justifyContent": "center",
      "padding": 24,
    }
  }
>
  <Text
    style={
      Object {
        "fontSize": 18,
        "marginBottom": 18,
      }
    }
  >
    Welcome to React Native Storybook
  </Text>
  <Text
    style={
      Object {
        "fontSize": 12,
        "lineHeight": 18,
        "marginBottom": 10,
      }
    }
  >
    This is a UI Component development environment for your React Native app. Here you can display and interact with your UI components as stories. A story is a single state of one or more UI components. You can have as many stories as you want. In other words a story is like a visual test case.
  </Text>
  <Text
    style={
      Object {
        "fontSize": 12,
        "lineHeight": 18,
        "marginBottom": 10,
      }
    }
  >
    We have added some stories inside the "storybook/stories" directory for examples. Try editing the "storybook/stories/Welcome.js" file to edit this message.
  </Text>
</View>
`;
